$my-background: #ff98a2;
$gray-color: rgb(176, 176, 176);

*,
*:before,
*:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
body {
  position: relative;
  background-color: black !important;
  // cursor: none;
  // overflow: hidden;
}
section {
  width: 100%;
  height: 100%;
}
ol,
ul {
  list-style: none;
}
a {
  text-decoration: none;
}
h1,
p,
a {
  color: white;
  font-weight: 400;
}
h1 {
  text-transform: uppercase;
  color: $my-background;
}
div {
  outline: 1px solid red;
}
/* ===================================================== */
/* ===================================================== */
.progress-bar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 10px;
  background: $my-background;
  transform-origin: 0%;
}
.my-gradient::after {
  content: "";
  position: absolute;
  top: 0;
  left: 50%;
  height: 100vw;
  width: 200vw;
  background: radial-gradient($my-background, rgba(255, 152, 162, 0) 70%);
  transform: translateX(-50%) translateY(50vh);
  opacity: 0.5;
}
input:invalid {
  background-color: ivory;
  outline: 2px solid red;
}
input:invalid + p {
  color: #a20e0e;
}

@function random_range($min, $max) {
  $rand: random();
  $random_range: $min + floor($rand * (($max - $min) + 1));
  @return $random_range;
}
.snow {
  $total: 200;
  background: $my-background;
  box-shadow: 0 0 10px 2px rgba(255, 152, 162, 0.7),
    0 0 5px 1px rgba(255, 152, 162, 0.5);
  animation: glow 1.5s infinite alternate;

  @keyframes glow {
    0% {
      box-shadow: 0 0 10px 2px rgba(255, 152, 162, 0.7),
        0 0 5px 1px rgba(255, 152, 162, 0.5);
    }
    100% {
      box-shadow: 0 0 20px 10px rgba(255, 152, 162, 1),
        0 0 50px 20px rgba(255, 152, 162, 0.7);
    }
  }

  @for $i from 1 through $total {
    $random-x: random(1000000) * 0.0001vw;
    $random-offset: random_range(-100000, 1000) * 0.0001vw;
    $random-x-end: $random-x + $random-offset;
    $random-x-end-yoyo: $random-x + ($random-offset / 2);
    $random-yoyo-time: random_range(30000, 80000) / 100000;
    $random-yoyo-y: $random-yoyo-time * 100vh;
    $random-scale: random(10000) * 0.0001;
    $fall-duration: random_range(10, 30) * 1s;
    $fall-delay: random(30) * -1s;

    &:nth-child(#{$i}) {
      opacity: random(10000) * 0.0001;
      transform: translate($random-x, -10px) scale($random-scale);
      animation: fall-#{$i} $fall-duration $fall-delay linear infinite;
    }

    @keyframes fall-#{$i} {
      #{percentage($random-yoyo-time)} {
        transform: translate($random-x-end, $random-yoyo-y) scale($random-scale);
      }

      to {
        transform: translate($random-x-end-yoyo, 100vh) scale($random-scale);
      }
    }
  }
}
// cursor
.secondary-cursor {
  z-index: 1000;
  border-radius: 50%;
  pointer-events: none;
  overflow: hidden;
  transform: translate3d(0, 0, 0);
  position: fixed;
  background: $my-background;
  // border: 1px solid black;
  mix-blend-mode: difference;
  transition: width 0.25s ease-in-out, height 0.25s ease-in-out;

  &.regular {
    width: 40px;
    height: 40px;
  }
  &.small {
    width: 60px;
    height: 60px;
  }
}

.secondary-cursor {
  z-index: 10000;

  pointer-events: none;
  // overflow: hidden;
  transform: translate3d(0, 0, 0);
  position: fixed;
}
.secondary-cursor {
  width: 15px;
  height: 15px;
}
@keyframes fadeIn {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

@keyframes fadeOut {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

@keyframes bgUp {
  from {
    background-color: transparent;
  }

  to {
    background-color: black;
  }
}

@keyframes bgDown {
  from {
    background-color: black;
  }

  to {
    background-color: transparent;
  }
}

@keyframes scaleUp {
  from {
    transform: scale(1);
  }

  to {
    transform: scale(1.5);
  }
}

@keyframes scaleDown {
  from {
    transform: scale(1.5);
  }

  to {
    transform: scale(1);
  }
}

@keyframes translateLeftDot {
  from {
    transform: translate(20px, -50%);
  }

  to {
    transform: translate(0px, -50%);
  }
}

@keyframes translateRightDot {
  from {
    transform: translate(-20px, -50%);
  }

  to {
    transform: translate(0px, -50%);
  }
}
// Progress ????
.progress {
  position: fixed;
  top: 0;
  right: 0;
  width: 80px;
  height: 80px;
  margin: 0;
  padding: 0;
  z-index: 1000;
}

.progress svg {
  transform: translateX(0) rotate(-90deg);
  width: 100%;
  height: 100%;
}

circle {
  stroke-dashoffset: 0;
  stroke-width: 5%;
  fill: none;
}

.bg {
  stroke: #fe0222;
  opacity: 0.2;
}

// scrollbar
// ::-webkit-scrollbar {
//   height: 12px;
//   width: 5px;
//   background: var(--background);
// }

// ::-webkit-scrollbar-thumb {
//   background: var(--accent);
//   -webkit-border-radius: 1ex;
// }

// ::-webkit-scrollbar-corner {
//   background: var(--background);
// }

// 전광판
.parallax {
  overflow: hidden;
  letter-spacing: -2px;
  line-height: 0.8;
  margin: 0;
  white-space: nowrap;
  display: flex;
  flex-wrap: nowrap;
}

.parallax .scroller {
  font-weight: 600;
  text-transform: uppercase;
  font-size: 64px;
  display: flex;
  white-space: nowrap;
  display: flex;
  flex-wrap: nowrap;
}

.parallax span {
  display: block;
  margin-right: 30px;
}
